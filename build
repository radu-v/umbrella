#!/bin/bash

# this uses the mcd-clang toolchain
# https://github.com/mcdachpappe/mcd-clang
# when building under WSL make sure the distro uses WSL 2

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	--skip-cleanup|--skip-cleanup)
	SKIPCLEAN=y
	shift
	;;
	--skip-config)
	SKIPCONFIG=y
	shift
	;;
	--skip-build)
	SKIPBUILD=y
	shift
	;;
	--skip-pack)
	SKIPPACK=y
	shift
	;;
	--no-branch)
	NOBRANCHINTITLE=y
	shift
	;;
	*)
	POSITIONAL+=("$1")
	shift
	;;
esac
done
set -- "${POSITIONAL[@]}"

if [ -z $NOBRANCHINTITLE ]; then
	CURRENT_BRANCH=$(git branch --show-current)
	CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH//_/}
	CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH_CLEAN// /_}
	CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH_CLEAN////_}
	CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH_CLEAN//[^a-zA-Z0-9_]/}-
else
	if [ -f release ]; then
		CURRENT_BRANCH_CLEAN=$(cat release)-
	else
		CURRENT_BRANCH_CLEAN=
	fi
fi

LAST_COMMIT=$(git rev-parse --verify --short=8 HEAD)
LOCALVERSION=-${CURRENT_BRANCH_CLEAN}$(date +"%d%m%y%H%M")-$LAST_COMMIT

TOOLCHAIN_DIR=${HOME}
ANYKERNEL_DIR="AnyKernel3"

# Path to executables in Clang toolchain
clang_path="${TOOLCHAIN_DIR}/mcd-clang"
clang_bin="${clang_path}/bin"

# 64-bit GCC toolchain prefix
gcc_prefix64="${clang_bin}/aarch64-linux-gnu-"

# 32-bit GCC toolchain prefix
gcc_prefix32="${clang_bin}/arm-linux-gnueabi-"

export PATH="${clang_bin}:${PATH}"
ARCH=arm64
KERNEL_OUTPUT=./out
DEFCONFIG=${DEFCONFIG:-nb1_defconfig}

KERNEL_OUTPUT=$(readlink -f ${KERNEL_OUTPUT})

function clean_output {
	echo "Cleaning output dir"
	rm -rf ${KERNEL_OUTPUT}
	make clean && make mrproper
	mkdir -p ${KERNEL_OUTPUT}
}

function make_config {
	echo "Making config"
	make O=${KERNEL_OUTPUT} ARCH=${ARCH} ${DEFCONFIG}
}

function make_kernel {
	echo "Build kernel"

	THREADS=$(nproc --all)

	kmake_flags=(
		-j"${THREADS}"
		ARCH="${ARCH}"
		O="${KERNEL_OUTPUT}"
		CC="ccache clang"
		AS="llvm-as"
		AR="llvm-ar"
		NM="llvm-nm"
		OBJCOPY="llvm-objcopy"
		OBJDUMP="llvm-objdump"
		STRIP="llvm-strip"
		CROSS_COMPILE="${gcc_prefix64}"
		CROSS_COMPILE_ARM32="${gcc_prefix32}"
		LOCALVERSION="${LOCALVERSION}"
	)

	make "${kmake_flags[@]}" $*
}

function pack_kernel {
	if [ -e ${KERNEL_OUTPUT}/arch/${ARCH}/boot/Image.gz-dtb ]; then
		echo "Packaging kernel"

		KERNEL_NAME="$(cat out/include/config/kernel.release)"

		ZIP_NAME=${KERNEL_OUTPUT}/${KERNEL_NAME}.zip

		rm ${ZIP_NAME} 2>/dev/null

		cd ${ANYKERNEL_DIR} && zip -r ${ZIP_NAME} * && cd -
		zip -j -u ${ZIP_NAME} ${KERNEL_OUTPUT}/arch/${ARCH}/boot/Image.gz-dtb
		echo "AnyKernel3 packaged to ${ZIP_NAME}"
	fi
}

if [ -z $SKIPCLEAN ]; then
	clean_output
else
	echo "Skipping cleanup"
fi

if [ -z $SKIPCONFIG ]; then
	make_config
else
	echo "Skipping make config"
fi

if [ -z $SKIPBUILD ]; then
	make_kernel $*
else
	echo "Skipping make kernel"
fi

if [ -z $SKIPPACK ]; then
	pack_kernel
else
	echo "Skipping packaging kernel"
fi

echo "Done."
